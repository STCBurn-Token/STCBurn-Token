contract Token is ERC20, Ownable {
    using SafeMath for uint256;

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;

    bool private swapping;

    TOKENDividendTracker public dividendTracker;

    address private constant deadWallet = address(0xdead);

    uint256 constant MAX_SUPPLY = 50_000_000 * 1e18; // 50 million tokens
    uint256 public constant FEE_DIVISOR = 10000;
    uint256 public swapTokensAtAmount = 1000 * 1e18;
    uint256 public maxTxAmount = (MAX_SUPPLY * 1) / 100; // 1% of total supply
    uint256 public maxWalletAmount = (MAX_SUPPLY * 4) / 100; //4% of total supply

    address public marketingWallet =
        address(0x8Dbc76d4ECe3B4d7E1a4BDFB71C22fC8323b96B3);
    address public SaitaChainCoinBuyandBurnWallet =
        address(0xD3ba60532dd03859208Ec276af6c4CD9e9fDE7F0);
    address public burnWallet = address(0xdead);
    address public REWARD = 0x19Ae49B9F38dD836317363839A5f6bfBFA7e319A;

    uint256 public rewardsFeeBuy = 150; // 1.5%
    uint256 public marketingFeeBuy = 50; // 0.5%
    uint256 public stcBuybackAndBurnFeeBuy = 150; // 1.5%
    uint256 public nativeBurnFeeBuy = 50; //0.5%
    uint256 public totalBuyFee =
        rewardsFeeBuy +
            marketingFeeBuy +
            stcBuybackAndBurnFeeBuy +
            nativeBurnFeeBuy;

    uint256 public rewardsFeeSell = 150; // 1.5%
    uint256 public marketingFeeSell = 50; // 0.5%
    uint256 public stcBuybackAndBurnFeeSell = 150; // 1.5%
    uint256 public nativeBurnFeeSell = 50; // 0.5%
    uint256 public totalSellFee =
        rewardsFeeSell +
            marketingFeeSell +
            stcBuybackAndBurnFeeSell +
            nativeBurnFeeSell;

    // use by default 300,000 gas to process auto-claiming dividends
    uint256 public gasForProcessing = 300000;
    bool tradingLive;

    // exlcude from fees and max transaction amount
    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public _isBlacklisted;

    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses
    // could be subject to a maximum transfer amount
    mapping(address => bool) public automatedMarketMakerPairs;

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event GasForProcessingUpdated(
        uint256 indexed newValue,
        uint256 indexed oldValue
    );


    event SendDividends(uint256 amount);

    event ProcessedDividendTracker(
        uint256 iterations,
        uint256 claims,
        uint256 lastProcessedIndex,
        bool indexed automatic,
        uint256 gas,
        address indexed processor
    );

    error SenderOrReceiverIsBlacklisted();
    error MaxFeesLimitExceeds();

    constructor() ERC20("SaitaChain Burn", "STCB") {
        dividendTracker = new TOKENDividendTracker(REWARD);

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x9aAC13697a077B23Af8826789AF7B9fdBd13111f
        );
        // Create a uniswap pair for this new token
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;

        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);

        // exclude from receiving dividends
        dividendTracker.excludeFromDividends(address(dividendTracker));
        dividendTracker.excludeFromDividends(address(this));
        dividendTracker.excludeFromDividends(owner());
        dividendTracker.excludeFromDividends(deadWallet);
        dividendTracker.excludeFromDividends(address(_uniswapV2Router));

        // exclude from paying fees or having max transaction amount
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);

        /*
            _mint is an internal function in ERC20.sol that is only called here,
            and CANNOT be called ever again
        */
        _mint(owner(), MAX_SUPPLY);
    }

    receive() external payable {}

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;

        emit ExcludeFromFees(account, excluded);
    }

    function excludeMultipleAccountsFromFees(
        address[] calldata accounts,
        bool excluded
    ) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFees[accounts[i]] = excluded;
        }

        emit ExcludeMultipleAccountsFromFees(accounts, excluded);
    }

    function claimStuckTokens(address _token) external onlyOwner {
        require(_token != address(this));

        if (_token == address(0x0)) {
            payable(owner()).transfer(address(this).balance);
            return;
        }

        IERC20 erc20token = IERC20(_token);
        uint256 balance = erc20token.balanceOf(address(this));
        erc20token.transfer(owner(), balance);
    }

    function setWallets(address mkt, address stcBuybackburn)
        external
        onlyOwner
    {
        marketingWallet = mkt;
        SaitaChainCoinBuyandBurnWallet = stcBuybackburn;
    }

    function setBuyFees(
        uint256 _market,
        uint256 _reward,
        uint256 _stcBurn,
        uint256 _nativeBurn
    ) external onlyOwner {
        /// max 5% fees
        require(_market + _reward + _stcBurn + _nativeBurn <= 500);
        marketingFeeBuy = _market;
        rewardsFeeBuy = _reward;
        stcBuybackAndBurnFeeBuy = _stcBurn;
        nativeBurnFeeBuy = _nativeBurn;
        totalBuyFee = _market + _reward + _stcBurn + _nativeBurn;
    }

    function setSellFees(
        uint256 _market,
        uint256 _reward,
        uint256 _stcBurn,
        uint256 _nativeBurn
    ) external onlyOwner {
        /// max 5% fees
        require(_market + _reward + _stcBurn + _nativeBurn <= 500);
        marketingFeeSell = _market;
        rewardsFeeSell = _reward;
        stcBuybackAndBurnFeeSell = _stcBurn;
        nativeBurnFeeSell = _nativeBurn;
        totalSellFee = _market + _reward + _stcBurn + _nativeBurn;
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
        public
        onlyOwner
    {
        _setAutomatedMarketMakerPair(pair, value);
    }

    function setSwapTokens(uint256 amount) external onlyOwner {
        if(amount < MAX_SUPPLY / 1000){
        swapTokensAtAmount = amount;
        }
    }

    function setMaxTxPercent(uint256 percent) external onlyOwner {
        if (percent > 1) {
            maxTxAmount = (MAX_SUPPLY * percent) / 100;
        }
    }

    function setMaxWallet(uint256 percent) external onlyOwner {
        if (percent > 1) {
            maxWalletAmount = (MAX_SUPPLY * percent) / 1000;
        }
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        if (value) {
            dividendTracker.excludeFromDividends(pair);
        }

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function blacklist (address user, bool value) external onlyOwner {
        _isBlacklisted[user] = value;
    }

    function updateGasForProcessing(uint256 newValue) public onlyOwner {
        require(newValue >= 200000 && newValue <= 500000);

        emit GasForProcessingUpdated(newValue, gasForProcessing);
        gasForProcessing = newValue;
    }

    function updateClaimWait(uint256 claimWait) external onlyOwner {
        dividendTracker.updateClaimWait(claimWait);
    }

    function getClaimWait() external view returns (uint256) {
        return dividendTracker.claimWait();
    }

    function getTotalDividendsDistributed() external view returns (uint256) {
        return dividendTracker.totalDividendsDistributed();
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function withdrawableDividendOf(address account)
        public
        view
        returns (uint256)
    {
        return dividendTracker.withdrawableDividendOf(account);
    }

    function dividendTokenBalanceOf(address account)
        public
        view
        returns (uint256)
    {
        return dividendTracker.balanceOf(account);
    }

    function excludeFromDividends(address account) external onlyOwner {
        dividendTracker.excludeFromDividends(account);
    }

    function getAccountDividendsInfo(address account)
        external
        view
        returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        return dividendTracker.getAccount(account);
    }

    function getAccountDividendsInfoAtIndex(uint256 index)
        external
        view
        returns (
            address,
            int256,
            int256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        return dividendTracker.getAccountAtIndex(index);
    }

    function processDividendTracker(uint256 gas) external {
        (
            uint256 iterations,
            uint256 claims,
            uint256 lastProcessedIndex
        ) = dividendTracker.process(gas);

        emit ProcessedDividendTracker(
            iterations,
            claims,
            lastProcessedIndex,
            false,
            gas,
            tx.origin
        );
    }

    function claim() external {
        dividendTracker.processAccount(payable(msg.sender), false);
    }

    function getLastProcessedIndex() external view returns (uint256) {
        return dividendTracker.getLastProcessedIndex();
    }

    function getNumberOfDividendTokenHolders() external view returns (uint256) {
        return dividendTracker.getNumberOfTokenHolders();
    }

    function enableTrading () external onlyOwner {
        require (!tradingLive, "trading is live already");
        tradingLive = true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {

        if(_isBlacklisted[from] || _isBlacklisted[to]){revert SenderOrReceiverIsBlacklisted();}
        if(!tradingLive){
            require(_isExcludedFromFees[from] || _isExcludedFromFees[to]);
        }
        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance >= swapTokensAtAmount;

        if (
            canSwap &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            from != owner() &&
            to != owner()
        ) {
            swapping = true;
            if (totalBuyFee + totalSellFee > 0) {
                uint256 burnTokens = contractTokenBalance
                    .mul(nativeBurnFeeBuy + nativeBurnFeeSell)
                    .div((totalBuyFee + totalSellFee));
                super._transfer(address(this), burnWallet, burnTokens);
                uint256 tokensForSwap = contractTokenBalance - burnTokens;

                uint256 fees = totalBuyFee +
                    totalSellFee -
                    nativeBurnFeeBuy -
                    nativeBurnFeeSell;
                if (tokensForSwap > 0 && fees > 0) {
                    swapForSTC(tokensForSwap, fees);
                }
            }
            swapping = false;
        }

        bool takeFee = !swapping;

        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        if (takeFee) {
            uint256 fees;
            if (automatedMarketMakerPairs[from]) {
                require(amount <= maxTxAmount, "Buy exceeds limit");
                fees = amount.mul(totalBuyFee).div(FEE_DIVISOR);
            } else if (automatedMarketMakerPairs[to]) {
                require(amount <= maxTxAmount, "Sell exceeds limit");
                fees = amount.mul(totalSellFee).div(FEE_DIVISOR);
            }

            if (!automatedMarketMakerPairs[to]) {
                require(
                    amount + balanceOf(to) <= maxWalletAmount,
                    "Wallet exceeds limit"
                );
            }

            amount = amount.sub(fees);
            super._transfer(from, address(this), fees);
        }

        super._transfer(from, to, amount);

        try
            dividendTracker.setBalance(payable(from), balanceOf(from))
        {} catch {}
        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}

        if (!swapping) {
            uint256 gas = gasForProcessing;

            try dividendTracker.process(gas) returns (
                uint256 iterations,
                uint256 claims,
                uint256 lastProcessedIndex
            ) {
                emit ProcessedDividendTracker(
                    iterations,
                    claims,
                    lastProcessedIndex,
                    true,
                    gas,
                    tx.origin
                );
            } catch {}
        }
    }

    function swapForSTC(uint256 tokens, uint256 fees) private {
        uint256 initialBalance = address(this).balance;
        swapTokensForBnb(tokens);
        uint256 newBalance = address(this).balance.sub(initialBalance);
        uint256 dividendsPart = (newBalance *
            (rewardsFeeBuy + rewardsFeeSell)) / fees;
        swapBnbForReward(dividendsPart); 
        uint256 rewardBalance = IERC20(REWARD).balanceOf(address(this));   
        uint256 mktPart = (newBalance * (marketingFeeBuy + marketingFeeSell)) /
            fees;
        sendDividends(rewardBalance);
        bool s;
        if (mktPart > 0) {
            (s, ) = payable(marketingWallet).call{value: mktPart}("");
        }
        if (address(this).balance > 0) {
            (s, ) = payable(SaitaChainCoinBuyandBurnWallet).call{
                value: address(this).balance
            }("");
        }
    }

    function swapTokensForBnb(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> wbnb
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of BNB
            path,
            address(this),
            block.timestamp + 360
        );
    }

    function swapBnbForReward (uint256 eth) private {
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = REWARD;
        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: eth}(
            0,
            path,
            address(this),
            block.timestamp + 360
        );
    }

    function sendDividends(uint256 dividends) private {
        uint256 balanceBefore = IERC20(REWARD).balanceOf(address(dividendTracker));
        (bool success) = IERC20(REWARD).transfer(address(dividendTracker), dividends);
        if (success) {
            uint256 balanceAfter = IERC20(REWARD).balanceOf(address(dividendTracker)) - balanceBefore;
            dividendTracker.distributeDividends(balanceAfter);
            emit SendDividends(dividends);
        }
    }
}
